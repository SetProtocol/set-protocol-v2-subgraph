# NOTE: This entity is depcrecated and will be removed
type SetTokenCount @entity {
  id: ID!
  count: BigInt!
}

type Controller @entity {
  id: ID!           # Controller ID (= "1")
  address: String!  # Controller contract address
  # derived fields
  setTokens: [SetToken!]! @derivedFrom(field: "controller")
}

type Manager @entity {

  # NOTE: This field is deprecated and will be removed
  address: String!

  id: ID!       # manager address
  type: String! # manager type
  # derived fields
  setTokens: [SetToken!]! @derivedFrom(field: "manager")
}

type DelegatedManager @entity {
  id: ID!                       # contract address
  owner: Owner                  # owner address
  methodologist: Methodologist  # methodologist address
  setToken: SetToken!           # linked SetToken (only 1-to-1)
  operators: [Operator!]        # Operator associations
}

type SetToken @entity {

  # NOTE: This field is deprecated and will be removed
  address: String!

  id: ID!                   # contract address
  controller: Controller!   # associated Controller
  inception: BigInt!        # block timestamp
  manager: Manager!         # associated Manager
  name: String!             # name of Set
  symbol: String!           # symbol of Set
  activityLog: ActivityLog! # log of events
}

type Owner @entity {
  id: ID!                   # owner address
  setTokens: [String!]      # associated SetToken addresses
}

type Methodologist @entity {
  id: ID!                   # methodologist address
  setTokens: [String!]      # associated SetToken addresses
}

type Operator @entity {
  id: ID!                   # operator address
  setTokens: [String!]      # associated SetToken addresses
}

type ActivityLog @entity {
  id: ID! # SetToken address
  # derived fields
  feeRecipientUpdates: [FeeRecipientUpdate!] @derivedFrom(field: "activityLog")
  managerUpdates: [ManagerUpdate!] @derivedFrom(field: "activityLog")
  streamingFeeAccrues: [StreamingFeeAccrue!] @derivedFrom(field: "activityLog")
  streamingFeeUpdates: [StreamingFeeUpdate!] @derivedFrom(field: "activityLog")
  rebalanceTrades: [RebalanceTrade!] @derivedFrom(field: "activityLog")
  ownerUpdates: [OwnerUpdate!] @derivedFrom(field: "activityLog")
  methodologistUpdates: [MethodologistUpdate!] @derivedFrom(field: "activityLog")
  operatorUpdates: [OperatorUpdate!] @derivedFrom(field: "activityLog")
}

type FeeRecipientUpdate @entity {
  id: ID!               # transaction hash
  timestamp: BigInt!    # timestamp of transaction
  address: String!      # address of new recipient
  activityLog: ActivityLog! # associated ActivityLog
}

type ManagerUpdate @entity {
  id: ID!               # transaction hash
  timestamp: BigInt!    # timestamp of transaction
  oldManager: String!   # address of old manager
  newManager: String!   # address of new manager
  activityLog: ActivityLog! # associated ActivityLog
}

type StreamingFeeAccrue @entity {
  id: ID!               # transaction hash
  timestamp: BigInt!    # timestamp of transaction
  managerFee: BigInt!   # amount of Sets accrued to manager as fee
  protocolFee: BigInt!  # amount of Sets accrued to protocol as fee
  activityLog: ActivityLog! # associated ActivityLog
}

type StreamingFeeUpdate @entity {
  id: ID!               # transaction hash
  timestamp: BigInt!    # timestamp of transaction
  fee: BigInt!          # new streaming fee
  activityLog: ActivityLog! # associated ActivityLog
}

type RebalanceTrade @entity {
  id: ID!                     # transaction hash
  timestamp: BigInt!          # timestamp of transaction
  exchange: String!           # name of the exchange in integrations registry
  sendToken: String!          # address of token sent to exchange
  receiveToken: String!       # address of token received from exchange
  totalSendAmount: BigInt!    # net total tokens sent
  totalReceiveAmount: BigInt! # net total tokens received
  fee: BigInt!                # protocol fee
  activityLog: ActivityLog!   # associated ActivityLog
}

type OwnerUpdate @entity {
  id: ID!                     # transaction hash
  address: String!            # new owner address
  timestamp: BigInt!          # timestamp of transaction
  activityLog: ActivityLog! # associated ActivityLog
}

type MethodologistUpdate @entity {
  id: ID!                     # transaction hash
  address: String!            # new methodologist address
  timestamp: BigInt!          # timestamp of transaction
  activityLog: ActivityLog!   # associated ActivityLog
}

type OperatorUpdate @entity {
  id: ID!                     # transaction hash
  action: String!             # "OperatorAdded" or "OperatorRemoved"
  address: String!            # target operator address
  timestamp: BigInt!          # timestamp of transaction
  activityLog: ActivityLog!   # associated ActivityLog
}
